name: CI
env:
  DEBUG: napi:*
  APP_NAME: rubick-native-addon
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
defaults:
  run:
    working-directory: addon
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build
              strip -x *.node
          - host: windows-latest
            build: pnpm build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target x86_64-unknown-linux-musl &&
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              pnpm build --target aarch64-apple-darwin
              strip -x *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - uses: jirutka/setup-alpine@v1
        if: ${{ matrix.settings.arch }}
        with:
          arch: ${{ matrix.settings.arch }}
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Set up Rust
        uses: ructions/toolchain@v2
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            addon/.cargo-cache
            addon/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  build-arm-musl:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
    name: ${{ matrix.settings.target }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.settings.arch }}
          volumes: ~/.cargo:~/.cargo
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            addon/.cargo-cache
            addon/target/
          key: ${{ matrix.settings.target }}-cargo-ubuntu-latest
      - name: Build
        shell: alpine.sh --root {0}
        run: |-
          set -e &&
          apk update &&
          apk add curl git gcc g++ make cmake gfortran libffi-dev openssl-dev autoconf automake libtool libuuid libevdev-dev xdo xdotool-dev libc-dev pkgconfig glib-dev gtk+3.0-dev pango-dev cairo-dev fontconfig-dev nodejs npm &&
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y &&
          source $HOME/.cargo/env &&
          rustup install nightly &&
          rustup default nightly &&
          rustup target add ${{ matrix.settings.target }} &&
          npm install &&
          PKG_CONFIG_SYSROOT_DIR=/ CARGO_BUILD_TARGET=${{ matrix.settings.target }} npm run build &&
          strip *.node
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  build-arm-gnu:
    name: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            addon/.cargo-cache
            addon/target/
          key: aarch64-unknown-linux-gnu-cargo-ubuntu-latest
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        with:
          arch: aarch64
          distro: ubuntu_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/addon"
            --volume "~/.cargo:/root/.cargo"
          run: |
              set -e &&
              apt-get update &&
              apt-get install nodejs npm libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              npm install n -g &&
              n stable &&
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y &&
              source $HOME/.cargo/env &&
              rustup install nightly &&
              rustup default nightly &&
              rustup target add aarch64-unknown-linux-gnu &&
              cd /addon/addon &&
              npm install &&
              PKG_CONFIG_SYSROOT_DIR=/ CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu npm run build &&
              strip *.node
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-apple-darwin
          path: addon/artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-apple-darwin
          path: addon/artifacts
      - name: Combine binaries
        run: pnpm universal
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-universal-apple-darwin
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - universal-macOS
      - build-arm-musl
      - build-arm-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: addon/artifacts
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Publish Addon
        run: |
          pnpm publish --access public --no-git-checks
      - name: Publish
        run: |
          cd ..
          pnpm i
          pnpm build
          pnpm publish --access public --no-git-checks
