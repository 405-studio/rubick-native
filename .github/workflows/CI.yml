name: CI
env:
  DEBUG: napi:*
  APP_NAME: rubick-native-addon
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
defaults:
  run:
    working-directory: addon
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build
              strip -x *.node
          - host: windows-latest
            build: pnpm build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev gcc-arm-linux-gnueabihf libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              rustup target add x86_64-unknown-linux-gnu &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev gcc-arm-linux-gnueabihf libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              rustup target add x86_64-unknown-linux-musl &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target x86_64-unknown-linux-musl &&
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              pnpm build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            # qemu: arm64
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev gcc-arm-linux-gnueabihf libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              rustup target add aarch64-unknown-linux-gnu &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target aarch64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            # qemu: arm64
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev gcc-arm-linux-gnueabihf libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target aarch64-unknown-linux-musl &&
              strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            # qemu: arm/v7
            build: |-
              sudo apt-get update &&
              sudo apt-get install libxdo-dev uuid-dev libc-dev pkg-config libglib2.0-dev libgtk-3-dev gcc-arm-linux-gnueabihf libgtk2.0-dev libpango1.0-dev libcairo2-dev libfontconfig1-dev -y &&
              set -e &&
              rustup target add armv7-unknown-linux-gnueabihf &&
              PKG_CONFIG_SYSROOT_DIR=/ pnpm build --target armv7-unknown-linux-gnueabihf &&
              strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: ${{ matrix.settings.qemu }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.settings.qemu }}
      - uses: pnpm/action-setup@v2
        if: ${{ !matrix.settings.docker }}
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: List Deps
        run: ls -R /usr/lib/
        if: matrix.settings.target == 'ubuntu-latest'
        shell: bash
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts
      - name: Combine binaries
        run: pnpm universal
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-universal-apple-darwin
          path: addon/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-22
    needs:
      - universal-macOS
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
# - name: Publish
#   run: |
#     npm config set provenance true
#     if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
#     then
#       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
#       npm publish --access public
#     elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
#     then
#       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
#       npm publish --tag next --access public
#     else
#       echo "Not a release, skipping publish"
#     fi
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
